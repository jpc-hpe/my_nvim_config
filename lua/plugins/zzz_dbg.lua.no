local CONFIG = vim.fn.stdpath("config")
local function xinspect(v)
  return vim.inspect(v, {
    process = function(item)
      if type(item) == "function" then
        local info = debug.getinfo(item, "Sln")
        return string.format(
          "<function: %s [%d-%d]>",
          info.source or "C function",
          info.linedefined or -1,
          info.lastlinedefined or -1
        )
      end
      return item
    end,
  })
end

local function write_pluginconfig(plugininfo, opts)
  local pluginname = plugininfo.name
  -- Convert pluginname like 'foo/bar.nvim' to 'foo_bar_nvim'
  local fname = pluginname:gsub("[/.]", "_")
  local dir = CONFIG .. "/cfgdumps"
  vim.fn.mkdir(dir, "p")
  local spec_path = dir .. "/" .. fname .. ".spec.lua"
  local spec_file = io.open(spec_path, "w")
  spec_file:write(string.format("return {\"%s\",opts = %s}\n", pluginname, xinspect(opts)))
  spec_file:close()
  local info_path = dir .. "/" .. fname .. ".info.lua"
  local info_file = io.open(info_path, "w")
  info_file:write("plugininfo=" .. xinspect(plugininfo))
  info_file:close()
end

local function make_plugin_specs(names)
  local specs = {}
  for _, name in ipairs(names) do
    table.insert(specs, {
      name,
      optional = true,
      opts = write_pluginconfig,
    })
  end
  return specs
end

-- JPC: one line for each plugin you want to dump
-- I left commented those where this causes problems.
return make_plugin_specs({
	"akinsho/bufferline.nvim",
	-- "b0o/SchemaStore.nvim",
	"catppuccin/nvim",
	"danymat/neogen",
	"dstein64/vim-startuptime",
	"echasnovski/mini.ai",
	"echasnovski/mini.files",
	"echasnovski/mini.hipatterns",
	"echasnovski/mini.icons",
	"echasnovski/mini.move",
	"echasnovski/mini.pairs",
	"folke/flash.nvim",
	"folke/lazydev.nvim",
	"folke/lazy.nvim",
	"folke/neoconf.nvim",
	"folke/noice.nvim",
	"folke/persistence.nvim",
	"folke/snacks.nvim",
	"folke/todo-comments.nvim",
	"folke/tokyonight.nvim",
	"folke/trouble.nvim",
	"folke/ts-comments.nvim",
	"folke/which-key.nvim",
	-- "fredrikaverpil/neotest-golang",
	"gbprod/yanky.nvim",
	-- "giuxtaposition/blink-cmp-copilot",
	"hedyhli/outline.nvim",
	"iamcco/markdown-preview.nvim",
	"ibhagwan/fzf-lua",
	-- "ii14/neorepl.nvim",
	"jay-babu/mason-nvim-dap.nvim",
	"jbyuki/one-small-step-for-vimkind",
	"jpc-hpe/chitshit.nvim",
	-- "kmarius/jsregexp",
	-- "kristijanhusak/vim-dadbod-completion",
	"kristijanhusak/vim-dadbod-ui",
	"L3MON4D3/LuaSnip",
	"LazyVim/LazyVim",
	"leoluz/nvim-dap-go",
	"lervag/vimtex",
	"lewis6991/gitsigns.nvim",
	"MagicDuck/grug-far.nvim",
	"mason-org/mason-lspconfig.nvim",
	"mason-org/mason.nvim",
	"MeanderingProgrammer/render-markdown.nvim",
	"mfussenegger/nvim-dap",
	"mfussenegger/nvim-dap-python",
	"mfussenegger/nvim-jdtls",
	"mfussenegger/nvim-lint",
	-- "mistweaverco/kulala-fmt",
	"mistweaverco/kulala.nvim",
	"monaqa/dial.nvim",
	"mrcjkb/rustaceanvim",
	-- "MunifTanjim/nui.nvim",
	"neovim/nvim-lspconfig",
	"nvim-lualine/lualine.nvim",
	-- "nvim-lua/plenary.nvim",
	-- "nvim-neotest/neotest",
	-- "nvim-neotest/neotest-python",
	-- "nvim-neotest/nvim-nio",
	"nvimtools/none-ls.nvim",
	"nvim-treesitter/nvim-treesitter",
	"nvim-treesitter/nvim-treesitter-textobjects",
	"olimorris/codecompanion.nvim",
	"rafamadriz/friendly-snippets",
	"rcarriga/nvim-dap-ui",
	"RRethy/vim-illuminate",
	"Saecki/crates.nvim",
	"saghen/blink.cmp",
	"scalameta/nvim-metals",
	"SmiteshP/nvim-navic",
	"smjonas/inc-rename.nvim",
	"stevearc/aerial.nvim",
	"stevearc/conform.nvim",
	"theHamsta/nvim-dap-virtual-text",
	"ThePrimeagen/refactoring.nvim",
	"towolf/vim-helm",
	-- "tpope/vim-dadbod",
	"windwp/nvim-ts-autotag",
	"yarospace/lua-console.nvim",
	"zbirenbaum/copilot.lua",
})
